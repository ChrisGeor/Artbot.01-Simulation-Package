#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan


def data_provider():
	
	rospy.init_node('motion_planner',anonymous=True)
	rospy.Subscriber("/scan",LaserScan,callback)
	rospy.spin()

def callback(SensorData):
	
	motion_activator=rospy.Publisher('/cmd_vel',Twist,queue_size=100)
	motion_activator_msg=Twist()
	rate=rospy.Rate(10)
	
	flag=False
	
	
	for i in range (199,467):
		if(SensorData.ranges[i]<(SensorData.range_min)*10):
			flag=True
			break
	if(flag==True):
		counter1=0
		counter2=0
		for j in range (0,299):
                	if(SensorData.ranges[j]<(SensorData.range_min)*10):
				counter1=counter1+1
		for k in range (368,667):
			if(SensorData.ranges[k]<(SensorData.range_min)*10):
				counter2=counter2+1	
		if (counter1>counter2):
				
			motion_activator_msg.linear.x=0
               		motion_activator_msg.angular.z= 0.6
		elif (counter1<counter2):
			motion_activator_msg.linear.x=0
                	motion_activator_msg.angular.z= - 0.6
		elif (counter1==counter2):
			for l in range (199,467):
                        	if(SensorData.ranges[l]<(SensorData.range_min)*10):
					motion_activator_msg.angular.z=0.6
				else:	
					motion_activator_msg.linear.x=0.6

	else:
		motion_activator_msg.linear.x=0.6
		motion_activator_msg.angular.z=0	
		
		
			

	motion_activator.publish(motion_activator_msg)
	rate.sleep()
	
if __name__ == '__main__':
	try:data_provider()
	except rospy.ROSInterruptException: pass
			
		
		
				
